`timescale 1ns/1ps

/*
* !!! README - MAKE IT RUN !!!
* a few things that you have to change in order to make the testbench template 
* runnable
* * tb_<module>.sv (aka this file)
*     * generate clocks - connect to dut ports
*     * make sure that the reset is synchronous to the correct clock
*     * connect the reset to the dut
*     * instantiate any other necessary module in the test environment, like 
*       a component model
* * agent_<module>.sv
*     * name if_<module>.clk to the/a correct clock from the actual interface
*     * adapt the btn_change example
*         * for writing you own code: comment it out
*         * for doing a functionality check: change if_<module>.buttons into 
*           a signal that exists in you interface
*/

import util_pkg::*;
import top_sim_pkg::*;

module tb__T_MODULE_T_;

localparam                      CLK_PERIOD = 10;
localparam                      RST_CYCLES = 6;
localparam                      RST_ACTIVE = RST_ACTIVE_LOW;

//----------------------------
// CLOCK/RESET
//----------------------------

logic                           clk;

initial begin
    clk <= 0;
    forever #(CLK_PERIOD/2) clk = ~clk;
end

ifc_rst #(CLK_PERIOD) if_rst (clk);
cls_rst_ctrl #(RST_ACTIVE) rst_ctrl;

//----------------------------
// SUBMODULES
//----------------------------

cls_agent__T_MODULE_T_ agent__T_MODULE_T_;
ifc__T_MODULE_T_ if__T_MODULE_T_(); // TODO: connect clocks

_T_MODULE_T_ inst__T_MODULE_T_ (
_T_INST_MODULE_T_
);

//----------------------------
// OPERATION
//----------------------------

initial begin
    $timeformat(-9, 1, "ns", 3);

    rst_ctrl = new(if_rst);
    agent__T_MODULE_T_ = new(if__T_MODULE_T_);

    rst_ctrl.init();
    rst_ctrl.trigger(RST_CYCLES);

    agent__T_MODULE_T_.run();
end

endmodule
